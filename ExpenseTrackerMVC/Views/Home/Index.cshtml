@{
    ViewData["Title"] = "Gider Listesi";
}

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 fw-bold text-primary">
            <i class="bi bi-wallet2 me-2"></i>Gider Takip Listesi
        </h1>
        <a asp-controller="Expense" asp-action="AddExpense" class="btn btn-primary">
            <i class="bi bi-plus-lg me-2"></i>Yeni Gider Ekle
        </a>
    </div>

    <div id="loading" class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2 text-muted">Giderler yükleniyor...</p>
    </div>

    <div id="expense-container" class="row g-4"></div>

    <div id="error-alert" class="alert alert-danger d-none mt-4" role="alert"></div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetchCategories();
            fetchExpenses();
        });
        let categoriesMap = {};

        async function fetchCategories() {
            try {
                const response = await fetch('https://localhost:7099/api/category/', {
                    credentials: 'include'
                });

                if (!response.ok) throw new Error('Kategoriler alınamadı');

                const categories = await response.json();

                categoriesMap = categories.reduce((map, category) => {
                    map[category.id] = category.categoryName;
                    return map;
                }, {});
            } catch (error) {
                console.error('Kategori yükleme hatası:', error);
            }
        }

        async function fetchExpenses() {
            try {
                const response = await fetch('https://localhost:7099/api/expense/', {
                    credentials: 'include'
                });

                if (!response.ok) throw new Error('Veriler alınamadı');
                const expenses = await response.json();

                document.getElementById('loading').classList.add('d-none');
                renderExpenses(expenses);
            } catch (error) {
                handleError(error);
            }
        }

        function renderExpenses(expenses) {
            const container = document.getElementById('expense-container');
            container.innerHTML = expenses.length ? generateExpenseCards(expenses) : getEmptyState();
        }

                function generateExpenseCards(expenses) {
            return expenses.map(expense => {
                const categoryName = categoriesMap[expense.categoryId] || 'Bilinmeyen Kategori';

                return `
                    <div class="col-12 col-md-6 col-lg-4">
                        <div class="card h-100 border-0 shadow-sm expense-card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <h5 class="card-title fw-bold">${expense.title}</h5>
                                    <span class="badge ${getCategoryBadgeStyle(categoryName)}">
                                        ${categoryName}
                                    </span>
                                </div>
                                <p class="text-muted small mb-3">${expense.description || 'Açıklama bulunmamaktadır'}</p>
                                <div class="d-flex justify-content-between align-items-end">
                                    <div>
                                        <span class="d-block text-success fw-bold fs-5">
                                            ${expense.amount.toFixed(2)} ₺
                                        </span>
                                        <small class="text-muted">
                                            <i class="bi bi-calendar me-1"></i>
                                            ${new Date(expense.expenseDate).toLocaleDateString('tr-TR')}
                                        </small>
                                    </div>
                                    <div class="btn-group">
                                        <a href="/Expense/Edit/${expense.id}" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteExpense('${expense.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }


        function getCategoryBadgeStyle(category) {
            const styles = {
                'Yemek': 'bg-warning text-dark',
                'Ulaşım': 'bg-info text-white',
                'Konaklama': 'bg-success text-white',
                'Eğlence': 'bg-danger text-white',
                'Diğer': 'bg-secondary text-white'
            };
            return `category-badge ${styles[category] || 'bg-primary text-white'}`;
        }

        function getEmptyState() {
            return `
                <div class="col-12 text-center py-5">
                    <i class="bi bi-wallet2 fs-1 text-muted"></i>
                    <p class="mt-3 text-muted">Henüz kayıtlı gider bulunmamaktadır.</p>
                </div>
            `;
        }

        async function deleteExpense(id) {
            if (confirm('Bu gideri silmek istediğinize emin misiniz?')) {
                try {
                    const response = await fetch(`https://localhost:7099/api/expense/${id}`, {
                        method: 'DELETE',
                        credentials: 'include'
                    });

                    if (response.ok) {
                        fetchExpenses();
                    }
                } catch (error) {
                    handleError(error);
                }
            }
        }

        function handleError(error) {
            console.error('Hata:', error);
            const errorAlert = document.getElementById('error-alert');
            errorAlert.textContent = `Hata: ${error.message}`;
            errorAlert.classList.remove('d-none');
            document.getElementById('loading').classList.add('d-none');
        }
    </script>

    <style>
        .expense-card {
            transition: transform 0.2s, box-shadow 0.2s;
            border-radius: 15px;
        }

            .expense-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 20px rgba(0,0,0,0.1);
            }

        .category-badge {
            font-size: 0.75rem;
            padding: 5px 10px;
            border-radius: 10px;
        }
    </style>
}