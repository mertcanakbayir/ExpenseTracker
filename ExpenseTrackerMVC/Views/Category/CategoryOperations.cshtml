@{
    ViewData["Title"] = "Kategori Yönetimi";
}

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-primary">
            <i class="bi bi-tags me-2"></i>Kategori Yönetimi
        </h2>
        <a asp-controller="Category" asp-action="AddCategory" class="btn btn-primary">
            <i class="bi bi-plus-lg me-2"></i>Yeni Ekle
        </a>
    </div>

    <!-- Kategori Listesi Tablosu -->
    <div class="card shadow-lg">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Kategori Adı</th>
                            <th style="width: 150px;">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody id="categoriesTable">
                        <tr>
                            <td colspan="2" class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Yükleniyor...</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Düzenleme Modalı -->
<div class="modal fade" id="editCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kategori Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editCategoryForm">
                    <input type="hidden" id="editCategoryId">
                    <div class="mb-3">
                        <label for="editCategoryName" class="form-label">Kategori Adı</label>
                        <input type="text" class="form-control" id="editCategoryName" required>
                    </div>
                    <div class="alert alert-danger d-none" id="editError"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="submit" form="editCategoryForm" class="btn btn-primary">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Silme Onay Modalı -->
<div class="modal fade" id="deleteCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger">Kategori Sil</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="deleteMessage"></p>
                <div class="alert alert-danger d-none" id="deleteError"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Sil</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let currentCategoryId = null;

            // Kategorileri yükle
            const loadCategories = async () => {
                try {
                    const response = await fetch('https://localhost:7099/api/category', {
                        credentials: 'include'
                    });

                    if (!response.ok) throw new Error('Veriler alınamadı');

                    const categories = await response.json();
                    renderCategories(categories);
                } catch (error) {
                    console.error('Hata:', error);
                    document.getElementById('categoriesTable').innerHTML = `
                        <tr>
                            <td colspan="2" class="text-center text-danger py-4">
                                Veriler yüklenirken hata oluştu
                            </td>
                        </tr>`;
                }
            };

            // Tabloyu doldur
            const renderCategories = (categories) => {
                const tbody = document.getElementById('categoriesTable');
                tbody.innerHTML = categories.map(category => `
                    <tr>
                        <td>${category.categoryName}</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary edit-btn"
                                    data-id="${category.id}"
                                    data-name="${category.categoryName}">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger ms-2 delete-btn"
                                    data-id="${category.id}"
                                    data-name="${category.categoryName}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');

                // Event listener'ları ekle
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', openEditModal);
                });

                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', openDeleteModal);
                });
            };
        // Düzenleme modalını aç (Güncellendi)
        const openEditModal = (e) => {
            const button = e.currentTarget; // Doğrudan tıklanan buton
            const category = {
                id: button.dataset.id,
                categoryName: button.dataset.name
            };

            document.getElementById('editCategoryId').value = category.id;
            document.getElementById('editCategoryName').value = category.categoryName;
            new bootstrap.Modal('#editCategoryModal').show();
        };

        // Silme modalını aç (Güncellendi)
        const openDeleteModal = (e) => {
            const button = e.currentTarget; // Doğrudan tıklanan buton
            const category = {
                id: button.dataset.id,
                categoryName: button.dataset.name
            };

            currentCategoryId = category.id;
            document.getElementById('deleteMessage').textContent =
                `"${category.categoryName}" adlı kategoriyi silmek istediğinize emin misiniz?`;
            new bootstrap.Modal('#deleteCategoryModal').show();
            console.log(category.categoryName);
            console.log(category.id);

        };

            // Kategori güncelleme
            document.getElementById('editCategoryForm').addEventListener('submit', async (e) => {
                e.preventDefault();

                const data = {
                    id: document.getElementById('editCategoryId').value,
                    categoryName: document.getElementById('editCategoryName').value
                };

                try {
                    const response = await fetch(`https://localhost:7099/api/category/${data.id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                        credentials: 'include'
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.title);
                    }

                    loadCategories();
                    bootstrap.Modal.getInstance('#editCategoryModal').hide();
                    alert('Kategori başarıyla güncellendi');
                } catch (error) {
                    document.getElementById('editError').textContent = error.message;
                    document.getElementById('editError').classList.remove('d-none');
                }
            });

            // Kategori silme
                   document.getElementById('confirmDelete').addEventListener('click', async () => {
            try {
                const response = await fetch(`https://localhost:7099/api/category/${currentCategoryId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });

                if (!response.ok) {
                    let errorMessage = "Bilinmeyen bir hata oluştu.";

                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.error || errorData.title || errorMessage;
                    } catch {
                        errorMessage = await response.text();
                    }

                    throw new Error(errorMessage);
                }

                loadCategories();
                bootstrap.Modal.getInstance(document.getElementById('deleteCategoryModal')).hide();
                alert('Kategori başarıyla silindi');

            } catch (error) {
                console.error("Silme işlemi hatası:", error);
                document.getElementById('deleteError').textContent = error.message;
                document.getElementById('deleteError').classList.remove('d-none');
            }
        });


            // İlk yükleme
            loadCategories();
        });
    </script>

    <style>
        .table-hover tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05);
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
        }
    </style>
}